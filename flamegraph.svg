<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="310"><g><title>vrf_with_verification`core::iter::adapters::process_results (1 samples, 0.32%)</title><rect x="0.0000%" y="245" width="0.3226%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>vrf_with_verification`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.32%)</title><rect x="0.0000%" y="229" width="0.3226%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>vrf_with_verification`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.32%)</title><rect x="0.0000%" y="213" width="0.3226%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>vrf_with_verification`alloc::raw_vec::finish_grow (1 samples, 0.32%)</title><rect x="0.0000%" y="197" width="0.3226%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.32%)</title><rect x="0.0000%" y="181" width="0.3226%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.32%)</title><rect x="0.0000%" y="165" width="0.3226%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.32%)</title><rect x="0.0000%" y="149" width="0.3226%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>vrf_with_verification`std::io::stdio::_print (1 samples, 0.32%)</title><rect x="0.3226%" y="245" width="0.3226%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.5726%" y="255.50"></text></g><g><title>vrf_with_verification`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.32%)</title><rect x="0.3226%" y="229" width="0.3226%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.5726%" y="239.50"></text></g><g><title>vrf_with_verification`core::fmt::write (1 samples, 0.32%)</title><rect x="0.3226%" y="213" width="0.3226%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.5726%" y="223.50"></text></g><g><title>vrf_with_verification`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.32%)</title><rect x="0.3226%" y="197" width="0.3226%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.5726%" y="207.50"></text></g><g><title>vrf_with_verification`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.32%)</title><rect x="0.3226%" y="181" width="0.3226%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.5726%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.32%)</title><rect x="0.3226%" y="165" width="0.3226%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.5726%" y="175.50"></text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::decode_point (1 samples, 0.32%)</title><rect x="0.6452%" y="229" width="0.3226%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.8952%" y="239.50"></text></g><g><title>vrf_with_verification`num_bigint::bigint::BigInt::modpow (1 samples, 0.32%)</title><rect x="0.6452%" y="213" width="0.3226%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.8952%" y="223.50"></text></g><g><title>vrf_with_verification`num_bigint::bigint::power::modpow (1 samples, 0.32%)</title><rect x="0.6452%" y="197" width="0.3226%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.8952%" y="207.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::power::modpow (1 samples, 0.32%)</title><rect x="0.6452%" y="181" width="0.3226%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.8952%" y="191.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::monty::monty_modpow (1 samples, 0.32%)</title><rect x="0.6452%" y="165" width="0.3226%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.8952%" y="175.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::monty::montgomery (1 samples, 0.32%)</title><rect x="0.6452%" y="149" width="0.3226%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.8952%" y="159.50"></text></g><g><title>vrf_with_verification`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.32%)</title><rect x="0.6452%" y="133" width="0.3226%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.8952%" y="143.50"></text></g><g><title>vrf_with_verification`__rust_alloc (1 samples, 0.32%)</title><rect x="0.6452%" y="117" width="0.3226%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.8952%" y="127.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::multiplication::mul3 (1 samples, 0.32%)</title><rect x="0.9677%" y="213" width="0.3226%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="1.2177%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`calloc (1 samples, 0.32%)</title><rect x="0.9677%" y="197" width="0.3226%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="1.2177%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (1 samples, 0.32%)</title><rect x="0.9677%" y="181" width="0.3226%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="1.2177%" y="191.50"></text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::ecvrf_hash_to_curve_elligator2_25519 (2 samples, 0.65%)</title><rect x="0.9677%" y="229" width="0.6452%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="2"/><text x="1.2177%" y="239.50"></text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::scalar_multiply (1 samples, 0.32%)</title><rect x="1.2903%" y="213" width="0.3226%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="1.5403%" y="223.50"></text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::edwards_add (1 samples, 0.32%)</title><rect x="1.2903%" y="197" width="0.3226%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="1.5403%" y="207.50"></text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::inverse (1 samples, 0.32%)</title><rect x="1.2903%" y="181" width="0.3226%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="1.5403%" y="191.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::multiplication::mul3 (1 samples, 0.32%)</title><rect x="1.2903%" y="165" width="0.3226%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="1"/><text x="1.5403%" y="175.50"></text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::edwards_add (1 samples, 0.32%)</title><rect x="1.6129%" y="229" width="0.3226%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="1.8629%" y="239.50"></text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::inverse (1 samples, 0.32%)</title><rect x="1.6129%" y="213" width="0.3226%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="1.8629%" y="223.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::division::div_rem_ref (1 samples, 0.32%)</title><rect x="1.6129%" y="197" width="0.3226%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="1.8629%" y="207.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::shift::biguint_shl2 (1 samples, 0.32%)</title><rect x="1.6129%" y="181" width="0.3226%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="1.8629%" y="191.50"></text></g><g><title>vrf_with_verification`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.32%)</title><rect x="1.6129%" y="165" width="0.3226%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="1.8629%" y="175.50"></text></g><g><title>vrf_with_verification`alloc::raw_vec::finish_grow (1 samples, 0.32%)</title><rect x="1.6129%" y="149" width="0.3226%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="1.8629%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.32%)</title><rect x="1.6129%" y="133" width="0.3226%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="1.8629%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.32%)</title><rect x="1.6129%" y="117" width="0.3226%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="1.8629%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.32%)</title><rect x="1.6129%" y="101" width="0.3226%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="1.8629%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.32%)</title><rect x="1.6129%" y="85" width="0.3226%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="1"/><text x="1.8629%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.32%)</title><rect x="1.9355%" y="197" width="0.3226%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="1"/><text x="2.1855%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.32%)</title><rect x="2.2581%" y="197" width="0.3226%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="1"/><text x="2.5081%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.32%)</title><rect x="2.5806%" y="197" width="0.3226%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="2.8306%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.32%)</title><rect x="2.9032%" y="197" width="0.3226%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="3.1532%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.32%)</title><rect x="2.9032%" y="181" width="0.3226%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="3.1532%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.32%)</title><rect x="2.9032%" y="165" width="0.3226%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="3.1532%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.32%)</title><rect x="2.9032%" y="149" width="0.3226%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="1"/><text x="3.1532%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.32%)</title><rect x="2.9032%" y="133" width="0.3226%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="1"/><text x="3.1532%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (4 samples, 1.29%)</title><rect x="3.2258%" y="197" width="1.2903%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="4"/><text x="3.4758%" y="207.50"></text></g><g><title>vrf_with_verification`__rdl_dealloc (2 samples, 0.65%)</title><rect x="4.5161%" y="197" width="0.6452%" height="15" fill="rgb(239,60,40)" fg:x="14" fg:w="2"/><text x="4.7661%" y="207.50"></text></g><g><title>vrf_with_verification`__rust_dealloc (1 samples, 0.32%)</title><rect x="5.1613%" y="197" width="0.3226%" height="15" fill="rgb(206,27,48)" fg:x="16" fg:w="1"/><text x="5.4113%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`calloc (1 samples, 0.32%)</title><rect x="5.4839%" y="149" width="0.3226%" height="15" fill="rgb(225,35,8)" fg:x="17" fg:w="1"/><text x="5.7339%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (1 samples, 0.32%)</title><rect x="5.4839%" y="133" width="0.3226%" height="15" fill="rgb(250,213,24)" fg:x="17" fg:w="1"/><text x="5.7339%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.32%)</title><rect x="5.4839%" y="117" width="0.3226%" height="15" fill="rgb(247,123,22)" fg:x="17" fg:w="1"/><text x="5.7339%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.32%)</title><rect x="5.4839%" y="101" width="0.3226%" height="15" fill="rgb(231,138,38)" fg:x="17" fg:w="1"/><text x="5.7339%" y="111.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::division::div_rem_core (2 samples, 0.65%)</title><rect x="5.4839%" y="165" width="0.6452%" height="15" fill="rgb(231,145,46)" fg:x="17" fg:w="2"/><text x="5.7339%" y="175.50"></text></g><g><title>vrf_with_verification`__udivti3 (1 samples, 0.32%)</title><rect x="5.8065%" y="149" width="0.3226%" height="15" fill="rgb(251,118,11)" fg:x="18" fg:w="1"/><text x="6.0565%" y="159.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::shift::biguint_shl2 (1 samples, 0.32%)</title><rect x="6.1290%" y="165" width="0.3226%" height="15" fill="rgb(217,147,25)" fg:x="19" fg:w="1"/><text x="6.3790%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.32%)</title><rect x="6.1290%" y="149" width="0.3226%" height="15" fill="rgb(247,81,37)" fg:x="19" fg:w="1"/><text x="6.3790%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.32%)</title><rect x="6.1290%" y="133" width="0.3226%" height="15" fill="rgb(209,12,38)" fg:x="19" fg:w="1"/><text x="6.3790%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.32%)</title><rect x="6.1290%" y="117" width="0.3226%" height="15" fill="rgb(227,1,9)" fg:x="19" fg:w="1"/><text x="6.3790%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.32%)</title><rect x="6.1290%" y="101" width="0.3226%" height="15" fill="rgb(248,47,43)" fg:x="19" fg:w="1"/><text x="6.3790%" y="111.50"></text></g><g><title>vrf_with_verification`num_bigint::bigint::division::_&lt;impl core::ops::arith::Rem&lt;&amp;num_bigint::bigint::BigInt&gt; for &amp;num_bigint::bigint::BigInt&gt;::rem (4 samples, 1.29%)</title><rect x="5.4839%" y="197" width="1.2903%" height="15" fill="rgb(221,10,30)" fg:x="17" fg:w="4"/><text x="5.7339%" y="207.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::division::div_rem_ref (4 samples, 1.29%)</title><rect x="5.4839%" y="181" width="1.2903%" height="15" fill="rgb(210,229,1)" fg:x="17" fg:w="4"/><text x="5.7339%" y="191.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::shift::biguint_shr2 (1 samples, 0.32%)</title><rect x="6.4516%" y="165" width="0.3226%" height="15" fill="rgb(222,148,37)" fg:x="20" fg:w="1"/><text x="6.7016%" y="175.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::multiplication::mul3 (3 samples, 0.97%)</title><rect x="6.7742%" y="197" width="0.9677%" height="15" fill="rgb(234,67,33)" fg:x="21" fg:w="3"/><text x="7.0242%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`calloc (2 samples, 0.65%)</title><rect x="7.0968%" y="181" width="0.6452%" height="15" fill="rgb(247,98,35)" fg:x="22" fg:w="2"/><text x="7.3468%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (2 samples, 0.65%)</title><rect x="7.0968%" y="165" width="0.6452%" height="15" fill="rgb(247,138,52)" fg:x="22" fg:w="2"/><text x="7.3468%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.65%)</title><rect x="7.0968%" y="149" width="0.6452%" height="15" fill="rgb(213,79,30)" fg:x="22" fg:w="2"/><text x="7.3468%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.65%)</title><rect x="7.0968%" y="133" width="0.6452%" height="15" fill="rgb(246,177,23)" fg:x="22" fg:w="2"/><text x="7.3468%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.32%)</title><rect x="7.4194%" y="117" width="0.3226%" height="15" fill="rgb(230,62,27)" fg:x="23" fg:w="1"/><text x="7.6694%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.32%)</title><rect x="7.4194%" y="101" width="0.3226%" height="15" fill="rgb(216,154,8)" fg:x="23" fg:w="1"/><text x="7.6694%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.97%)</title><rect x="9.6774%" y="181" width="0.9677%" height="15" fill="rgb(244,35,45)" fg:x="30" fg:w="3"/><text x="9.9274%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 3.23%)</title><rect x="15.4839%" y="165" width="3.2258%" height="15" fill="rgb(251,115,12)" fg:x="48" fg:w="10"/><text x="15.7339%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 3.23%)</title><rect x="15.4839%" y="149" width="3.2258%" height="15" fill="rgb(240,54,50)" fg:x="48" fg:w="10"/><text x="15.7339%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (26 samples, 8.39%)</title><rect x="10.6452%" y="181" width="8.3871%" height="15" fill="rgb(233,84,52)" fg:x="33" fg:w="26"/><text x="10.8952%" y="191.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.32%)</title><rect x="18.7097%" y="165" width="0.3226%" height="15" fill="rgb(207,117,47)" fg:x="58" fg:w="1"/><text x="18.9597%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (15 samples, 4.84%)</title><rect x="33.5484%" y="149" width="4.8387%" height="15" fill="rgb(249,43,39)" fg:x="104" fg:w="15"/><text x="33.7984%" y="159.50">libsys..</text></g><g><title>libsystem_malloc.dylib`free_tiny (64 samples, 20.65%)</title><rect x="19.0323%" y="181" width="20.6452%" height="15" fill="rgb(209,38,44)" fg:x="59" fg:w="64"/><text x="19.2823%" y="191.50">libsystem_malloc.dylib`free_tiny</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (42 samples, 13.55%)</title><rect x="26.1290%" y="165" width="13.5484%" height="15" fill="rgb(236,212,23)" fg:x="81" fg:w="42"/><text x="26.3790%" y="175.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 1.29%)</title><rect x="38.3871%" y="149" width="1.2903%" height="15" fill="rgb(242,79,21)" fg:x="119" fg:w="4"/><text x="38.6371%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 4.19%)</title><rect x="39.6774%" y="181" width="4.1935%" height="15" fill="rgb(211,96,35)" fg:x="123" fg:w="13"/><text x="39.9274%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (11 samples, 3.55%)</title><rect x="40.3226%" y="165" width="3.5484%" height="15" fill="rgb(253,215,40)" fg:x="125" fg:w="11"/><text x="40.5726%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 3.23%)</title><rect x="40.6452%" y="149" width="3.2258%" height="15" fill="rgb(211,81,21)" fg:x="126" fg:w="10"/><text x="40.8952%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 3.23%)</title><rect x="40.6452%" y="133" width="3.2258%" height="15" fill="rgb(208,190,38)" fg:x="126" fg:w="10"/><text x="40.8952%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.32%)</title><rect x="43.8710%" y="181" width="0.3226%" height="15" fill="rgb(235,213,38)" fg:x="136" fg:w="1"/><text x="44.1210%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.65%)</title><rect x="44.1935%" y="181" width="0.6452%" height="15" fill="rgb(237,122,38)" fg:x="137" fg:w="2"/><text x="44.4435%" y="191.50"></text></g><g><title>vrf_with_verification`__rust_alloc_zeroed (1 samples, 0.32%)</title><rect x="44.8387%" y="181" width="0.3226%" height="15" fill="rgb(244,218,35)" fg:x="139" fg:w="1"/><text x="45.0887%" y="191.50"></text></g><g><title>vrf_with_verification`num_bigint::bigint::BigInt::from_biguint (5 samples, 1.61%)</title><rect x="45.1613%" y="181" width="1.6129%" height="15" fill="rgb(240,68,47)" fg:x="140" fg:w="5"/><text x="45.4113%" y="191.50"></text></g><g><title>vrf_with_verification`num_bigint::bigint::division::_&lt;impl core::ops::arith::Rem&lt;&amp;num_bigint::bigint::BigInt&gt; for &amp;num_bigint::bigint::BigInt&gt;::rem (1 samples, 0.32%)</title><rect x="46.7742%" y="181" width="0.3226%" height="15" fill="rgb(210,16,53)" fg:x="145" fg:w="1"/><text x="47.0242%" y="191.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::division::div_rem_ref (1 samples, 0.32%)</title><rect x="46.7742%" y="165" width="0.3226%" height="15" fill="rgb(235,124,12)" fg:x="145" fg:w="1"/><text x="47.0242%" y="175.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::division::div_rem_core (1 samples, 0.32%)</title><rect x="46.7742%" y="149" width="0.3226%" height="15" fill="rgb(224,169,11)" fg:x="145" fg:w="1"/><text x="47.0242%" y="159.50"></text></g><g><title>vrf_with_verification`num_bigint::bigint::BigInt::from_biguint (1 samples, 0.32%)</title><rect x="48.0645%" y="165" width="0.3226%" height="15" fill="rgb(250,166,2)" fg:x="149" fg:w="1"/><text x="48.3145%" y="175.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::addition::_&lt;impl core::ops::arith::Add&lt;&amp;num_bigint::biguint::BigUint&gt; for num_bigint::biguint::BigUint&gt;::add (2 samples, 0.65%)</title><rect x="48.3871%" y="165" width="0.6452%" height="15" fill="rgb(242,216,29)" fg:x="150" fg:w="2"/><text x="48.6371%" y="175.50"></text></g><g><title>vrf_with_verification`num_bigint::bigint::subtraction::_&lt;impl core::ops::arith::Sub&lt;num_bigint::bigint::BigInt&gt; for &amp;num_bigint::bigint::BigInt&gt;::sub (7 samples, 2.26%)</title><rect x="47.0968%" y="181" width="2.2581%" height="15" fill="rgb(230,116,27)" fg:x="146" fg:w="7"/><text x="47.3468%" y="191.50">v..</text></g><g><title>vrf_with_verification`num_bigint::biguint::subtraction::_&lt;impl core::ops::arith::Sub&lt;num_bigint::biguint::BigUint&gt; for &amp;num_bigint::biguint::BigUint&gt;::sub (1 samples, 0.32%)</title><rect x="49.0323%" y="165" width="0.3226%" height="15" fill="rgb(228,99,48)" fg:x="152" fg:w="1"/><text x="49.2823%" y="175.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::addition::_&lt;impl core::ops::arith::Add&lt;&amp;num_bigint::biguint::BigUint&gt; for num_bigint::biguint::BigUint&gt;::add (1 samples, 0.32%)</title><rect x="49.3548%" y="181" width="0.3226%" height="15" fill="rgb(253,11,6)" fg:x="153" fg:w="1"/><text x="49.6048%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`calloc (1 samples, 0.32%)</title><rect x="50.3226%" y="165" width="0.3226%" height="15" fill="rgb(247,143,39)" fg:x="156" fg:w="1"/><text x="50.5726%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.32%)</title><rect x="50.6452%" y="165" width="0.3226%" height="15" fill="rgb(236,97,10)" fg:x="157" fg:w="1"/><text x="50.8952%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.32%)</title><rect x="50.9677%" y="165" width="0.3226%" height="15" fill="rgb(233,208,19)" fg:x="158" fg:w="1"/><text x="51.2177%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.32%)</title><rect x="50.9677%" y="149" width="0.3226%" height="15" fill="rgb(216,164,2)" fg:x="158" fg:w="1"/><text x="51.2177%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.32%)</title><rect x="50.9677%" y="133" width="0.3226%" height="15" fill="rgb(220,129,5)" fg:x="158" fg:w="1"/><text x="51.2177%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.97%)</title><rect x="51.2903%" y="165" width="0.9677%" height="15" fill="rgb(242,17,10)" fg:x="159" fg:w="3"/><text x="51.5403%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 1.61%)</title><rect x="52.2581%" y="165" width="1.6129%" height="15" fill="rgb(242,107,0)" fg:x="162" fg:w="5"/><text x="52.5081%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (4 samples, 1.29%)</title><rect x="52.5806%" y="149" width="1.2903%" height="15" fill="rgb(251,28,31)" fg:x="163" fg:w="4"/><text x="52.8306%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 1.29%)</title><rect x="52.5806%" y="133" width="1.2903%" height="15" fill="rgb(233,223,10)" fg:x="163" fg:w="4"/><text x="52.8306%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.97%)</title><rect x="52.9032%" y="117" width="0.9677%" height="15" fill="rgb(215,21,27)" fg:x="164" fg:w="3"/><text x="53.1532%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.32%)</title><rect x="53.5484%" y="101" width="0.3226%" height="15" fill="rgb(232,23,21)" fg:x="166" fg:w="1"/><text x="53.7984%" y="111.50"></text></g><g><title>vrf_with_verification`__rdl_alloc (1 samples, 0.32%)</title><rect x="53.8710%" y="165" width="0.3226%" height="15" fill="rgb(244,5,23)" fg:x="167" fg:w="1"/><text x="54.1210%" y="175.50"></text></g><g><title>vrf_with_verification`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 1.29%)</title><rect x="54.1935%" y="165" width="1.2903%" height="15" fill="rgb(226,81,46)" fg:x="168" fg:w="4"/><text x="54.4435%" y="175.50"></text></g><g><title>vrf_with_verification`alloc::raw_vec::finish_grow (3 samples, 0.97%)</title><rect x="54.5161%" y="149" width="0.9677%" height="15" fill="rgb(247,70,30)" fg:x="169" fg:w="3"/><text x="54.7661%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.97%)</title><rect x="54.5161%" y="133" width="0.9677%" height="15" fill="rgb(212,68,19)" fg:x="169" fg:w="3"/><text x="54.7661%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.97%)</title><rect x="54.5161%" y="117" width="0.9677%" height="15" fill="rgb(240,187,13)" fg:x="169" fg:w="3"/><text x="54.7661%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.97%)</title><rect x="54.5161%" y="101" width="0.9677%" height="15" fill="rgb(223,113,26)" fg:x="169" fg:w="3"/><text x="54.7661%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.97%)</title><rect x="54.5161%" y="85" width="0.9677%" height="15" fill="rgb(206,192,2)" fg:x="169" fg:w="3"/><text x="54.7661%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.32%)</title><rect x="55.1613%" y="69" width="0.3226%" height="15" fill="rgb(241,108,4)" fg:x="171" fg:w="1"/><text x="55.4113%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`calloc (7 samples, 2.26%)</title><rect x="57.7419%" y="149" width="2.2581%" height="15" fill="rgb(247,173,49)" fg:x="179" fg:w="7"/><text x="57.9919%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (7 samples, 2.26%)</title><rect x="57.7419%" y="133" width="2.2581%" height="15" fill="rgb(224,114,35)" fg:x="179" fg:w="7"/><text x="57.9919%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 1.94%)</title><rect x="58.0645%" y="117" width="1.9355%" height="15" fill="rgb(245,159,27)" fg:x="180" fg:w="6"/><text x="58.3145%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 1.94%)</title><rect x="58.0645%" y="101" width="1.9355%" height="15" fill="rgb(245,172,44)" fg:x="180" fg:w="6"/><text x="58.3145%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.97%)</title><rect x="59.0323%" y="85" width="0.9677%" height="15" fill="rgb(236,23,11)" fg:x="183" fg:w="3"/><text x="59.2823%" y="95.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::division::div_rem_core (18 samples, 5.81%)</title><rect x="55.4839%" y="165" width="5.8065%" height="15" fill="rgb(205,117,38)" fg:x="172" fg:w="18"/><text x="55.7339%" y="175.50">vrf_wit..</text></g><g><title>vrf_with_verification`__udivti3 (4 samples, 1.29%)</title><rect x="60.0000%" y="149" width="1.2903%" height="15" fill="rgb(237,72,25)" fg:x="186" fg:w="4"/><text x="60.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.32%)</title><rect x="63.5484%" y="133" width="0.3226%" height="15" fill="rgb(244,70,9)" fg:x="197" fg:w="1"/><text x="63.7984%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.65%)</title><rect x="68.7097%" y="85" width="0.6452%" height="15" fill="rgb(217,125,39)" fg:x="213" fg:w="2"/><text x="68.9597%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc (23 samples, 7.42%)</title><rect x="63.5484%" y="149" width="7.4194%" height="15" fill="rgb(235,36,10)" fg:x="197" fg:w="23"/><text x="63.7984%" y="159.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (22 samples, 7.10%)</title><rect x="63.8710%" y="133" width="7.0968%" height="15" fill="rgb(251,123,47)" fg:x="198" fg:w="22"/><text x="64.1210%" y="143.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 6.77%)</title><rect x="64.1935%" y="117" width="6.7742%" height="15" fill="rgb(221,13,13)" fg:x="199" fg:w="21"/><text x="64.4435%" y="127.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 6.77%)</title><rect x="64.1935%" y="101" width="6.7742%" height="15" fill="rgb(238,131,9)" fg:x="199" fg:w="21"/><text x="64.4435%" y="111.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 1.61%)</title><rect x="69.3548%" y="85" width="1.6129%" height="15" fill="rgb(211,50,8)" fg:x="215" fg:w="5"/><text x="69.6048%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.32%)</title><rect x="70.6452%" y="69" width="0.3226%" height="15" fill="rgb(245,182,24)" fg:x="219" fg:w="1"/><text x="70.8952%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.97%)</title><rect x="70.9677%" y="149" width="0.9677%" height="15" fill="rgb(242,14,37)" fg:x="220" fg:w="3"/><text x="71.2177%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.32%)</title><rect x="73.2258%" y="85" width="0.3226%" height="15" fill="rgb(246,228,12)" fg:x="227" fg:w="1"/><text x="73.4758%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.32%)</title><rect x="73.5484%" y="85" width="0.3226%" height="15" fill="rgb(213,55,15)" fg:x="228" fg:w="1"/><text x="73.7984%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 1.94%)</title><rect x="74.1935%" y="69" width="1.9355%" height="15" fill="rgb(209,9,3)" fg:x="230" fg:w="6"/><text x="74.4435%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.97%)</title><rect x="75.1613%" y="53" width="0.9677%" height="15" fill="rgb(230,59,30)" fg:x="233" fg:w="3"/><text x="75.4113%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 1.94%)</title><rect x="76.1290%" y="69" width="1.9355%" height="15" fill="rgb(209,121,21)" fg:x="236" fg:w="6"/><text x="76.3790%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 1.94%)</title><rect x="76.1290%" y="53" width="1.9355%" height="15" fill="rgb(220,109,13)" fg:x="236" fg:w="6"/><text x="76.3790%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.97%)</title><rect x="77.0968%" y="37" width="0.9677%" height="15" fill="rgb(232,18,1)" fg:x="239" fg:w="3"/><text x="77.3468%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 1.61%)</title><rect x="78.0645%" y="69" width="1.6129%" height="15" fill="rgb(215,41,42)" fg:x="242" fg:w="5"/><text x="78.3145%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 1.61%)</title><rect x="78.0645%" y="53" width="1.6129%" height="15" fill="rgb(224,123,36)" fg:x="242" fg:w="5"/><text x="78.3145%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 7.74%)</title><rect x="73.2258%" y="101" width="7.7419%" height="15" fill="rgb(240,125,3)" fg:x="227" fg:w="24"/><text x="73.4758%" y="111.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (22 samples, 7.10%)</title><rect x="73.8710%" y="85" width="7.0968%" height="15" fill="rgb(205,98,50)" fg:x="229" fg:w="22"/><text x="74.1210%" y="95.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (4 samples, 1.29%)</title><rect x="79.6774%" y="69" width="1.2903%" height="15" fill="rgb(205,185,37)" fg:x="247" fg:w="4"/><text x="79.9274%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 8.39%)</title><rect x="73.2258%" y="117" width="8.3871%" height="15" fill="rgb(238,207,15)" fg:x="227" fg:w="26"/><text x="73.4758%" y="127.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.65%)</title><rect x="80.9677%" y="101" width="0.6452%" height="15" fill="rgb(213,199,42)" fg:x="251" fg:w="2"/><text x="81.2177%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.32%)</title><rect x="81.2903%" y="85" width="0.3226%" height="15" fill="rgb(235,201,11)" fg:x="252" fg:w="1"/><text x="81.5403%" y="95.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::division::div_rem_ref (100 samples, 32.26%)</title><rect x="49.6774%" y="181" width="32.2581%" height="15" fill="rgb(207,46,11)" fg:x="154" fg:w="100"/><text x="49.9274%" y="191.50">vrf_with_verification`num_bigint::biguint::division:..</text></g><g><title>vrf_with_verification`num_bigint::biguint::shift::biguint_shl2 (64 samples, 20.65%)</title><rect x="61.2903%" y="165" width="20.6452%" height="15" fill="rgb(241,35,35)" fg:x="190" fg:w="64"/><text x="61.5403%" y="175.50">vrf_with_verification`num_bigint..</text></g><g><title>vrf_with_verification`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (31 samples, 10.00%)</title><rect x="71.9355%" y="149" width="10.0000%" height="15" fill="rgb(243,32,47)" fg:x="223" fg:w="31"/><text x="72.1855%" y="159.50">vrf_with_verif..</text></g><g><title>vrf_with_verification`alloc::raw_vec::finish_grow (27 samples, 8.71%)</title><rect x="73.2258%" y="133" width="8.7097%" height="15" fill="rgb(247,202,23)" fg:x="227" fg:w="27"/><text x="73.4758%" y="143.50">vrf_with_ver..</text></g><g><title>vrf_with_verification`__rdl_realloc (1 samples, 0.32%)</title><rect x="81.6129%" y="117" width="0.3226%" height="15" fill="rgb(219,102,11)" fg:x="253" fg:w="1"/><text x="81.8629%" y="127.50"></text></g><g><title>vrf_with_verification`num_bigint::biguint::multiplication::mac3 (1 samples, 0.32%)</title><rect x="81.9355%" y="181" width="0.3226%" height="15" fill="rgb(243,110,44)" fg:x="254" fg:w="1"/><text x="82.1855%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_calloc (3 samples, 0.97%)</title><rect x="85.1613%" y="133" width="0.9677%" height="15" fill="rgb(222,74,54)" fg:x="264" fg:w="3"/><text x="85.4113%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.65%)</title><rect x="94.1935%" y="101" width="0.6452%" height="15" fill="rgb(216,99,12)" fg:x="292" fg:w="2"/><text x="94.4435%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 2.58%)</title><rect x="94.8387%" y="101" width="2.5806%" height="15" fill="rgb(226,22,26)" fg:x="294" fg:w="8"/><text x="95.0887%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.65%)</title><rect x="96.7742%" y="85" width="0.6452%" height="15" fill="rgb(217,163,10)" fg:x="300" fg:w="2"/><text x="97.0242%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 11.29%)</title><rect x="86.7742%" y="117" width="11.2903%" height="15" fill="rgb(213,25,53)" fg:x="269" fg:w="35"/><text x="87.0242%" y="127.50">libsystem_malloc...</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.65%)</title><rect x="97.4194%" y="101" width="0.6452%" height="15" fill="rgb(252,105,26)" fg:x="302" fg:w="2"/><text x="97.6694%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`calloc (42 samples, 13.55%)</title><rect x="84.8387%" y="165" width="13.5484%" height="15" fill="rgb(220,39,43)" fg:x="263" fg:w="42"/><text x="85.0887%" y="175.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (41 samples, 13.23%)</title><rect x="85.1613%" y="149" width="13.2258%" height="15" fill="rgb(229,68,48)" fg:x="264" fg:w="41"/><text x="85.4113%" y="159.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 12.26%)</title><rect x="86.1290%" y="133" width="12.2581%" height="15" fill="rgb(252,8,32)" fg:x="267" fg:w="38"/><text x="86.3790%" y="143.50">libsystem_malloc.d..</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.32%)</title><rect x="98.0645%" y="117" width="0.3226%" height="15" fill="rgb(223,20,43)" fg:x="304" fg:w="1"/><text x="98.3145%" y="127.50"></text></g><g><title>vrf_with_verification`__rdl_alloc_zeroed (1 samples, 0.32%)</title><rect x="98.3871%" y="165" width="0.3226%" height="15" fill="rgb(229,81,49)" fg:x="305" fg:w="1"/><text x="98.6371%" y="175.50"></text></g><g><title>all (310 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="310"/><text x="0.2500%" y="383.50"></text></g><g><title>vrf_with_verification`0x1 (310 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="310"/><text x="0.2500%" y="367.50">vrf_with_verification`0x1</text></g><g><title>libdyld.dylib`start (310 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="310"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>vrf_with_verification`main (310 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="310"/><text x="0.2500%" y="335.50">vrf_with_verification`main</text></g><g><title>vrf_with_verification`std::rt::lang_start_internal (310 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="310"/><text x="0.2500%" y="319.50">vrf_with_verification`std::rt::lang_start_internal</text></g><g><title>vrf_with_verification`std::rt::lang_start::_{{closure}} (310 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="310"/><text x="0.2500%" y="303.50">vrf_with_verification`std::rt::lang_start::_{{closure}}</text></g><g><title>vrf_with_verification`std::sys_common::backtrace::__rust_begin_short_backtrace (310 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="310"/><text x="0.2500%" y="287.50">vrf_with_verification`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>vrf_with_verification`vrf_with_verification::main (310 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="310"/><text x="0.2500%" y="271.50">vrf_with_verification`vrf_with_verification::main</text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::ecvrf_verify (308 samples, 99.35%)</title><rect x="0.6452%" y="245" width="99.3548%" height="15" fill="rgb(249,83,47)" fg:x="2" fg:w="308"/><text x="0.8952%" y="255.50">vrf_with_verification`vrf_with_verification::ecvrf::ecvrf_verify</text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::scalar_multiply (304 samples, 98.06%)</title><rect x="1.9355%" y="229" width="98.0645%" height="15" fill="rgb(215,43,3)" fg:x="6" fg:w="304"/><text x="2.1855%" y="239.50">vrf_with_verification`vrf_with_verification::ecvrf::scalar_multiply</text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::edwards_add (304 samples, 98.06%)</title><rect x="1.9355%" y="213" width="98.0645%" height="15" fill="rgb(238,154,13)" fg:x="6" fg:w="304"/><text x="2.1855%" y="223.50">vrf_with_verification`vrf_with_verification::ecvrf::edwards_add</text></g><g><title>vrf_with_verification`vrf_with_verification::ecvrf::inverse (286 samples, 92.26%)</title><rect x="7.7419%" y="197" width="92.2581%" height="15" fill="rgb(219,56,2)" fg:x="24" fg:w="286"/><text x="7.9919%" y="207.50">vrf_with_verification`vrf_with_verification::ecvrf::inverse</text></g><g><title>vrf_with_verification`num_bigint::biguint::multiplication::mul3 (55 samples, 17.74%)</title><rect x="82.2581%" y="181" width="17.7419%" height="15" fill="rgb(233,0,4)" fg:x="255" fg:w="55"/><text x="82.5081%" y="191.50">vrf_with_verification`num_bi..</text></g><g><title>vrf_with_verification`num_bigint::biguint::multiplication::mac3 (4 samples, 1.29%)</title><rect x="98.7097%" y="165" width="1.2903%" height="15" fill="rgb(235,30,7)" fg:x="306" fg:w="4"/><text x="98.9597%" y="175.50"></text></g></svg></svg>